import heapq

class PerformanceAnalytics:
    def __init__(self):
        self.scores = {}

    def add_score(self, student_id, subject, score):
        self.scores.setdefault(student_id, []).append(score)

    def average(self, student_id):
        s = self.scores.get(student_id, [])
        return sum(s) / len(s) if s else 0

    def top_k(self, k=3):
        heap = []
        for sid, scores in self.scores.items():
            avg = sum(scores) / len(scores)
            heapq.heappush(heap, (-avg, sid))
        return [(sid, -avg) for avg, sid in heapq.nsmallest(k, heap)]
